#######################################
####    Frequently used aliases    ####
#######################################

alias alarm='$HOME/github/alarm-sh/alarm.sh'
alias alsi='alsi; cursor-show'
alias ansiweather='ansiweather -u imperial -l'
alias betty='$HOME/github/betty/main.rb'
alias chx='chmod a+x'
alias clean='sed "s,\x1B\[[0-9;]*[a-zA-Z],,g"'
alias clr='clear'
alias cursor-hide="printf '\e[?25l'"
alias cursor-show="printf '\e[?25h'"
alias drive-speed='hdparam -Tt'
alias echo='/bin/echo'
alias edit-aliases='micro ~/.zsh_aliases'
alias edit-zshrc='micro ~/.zshrc'
alias fd='fd -c never'
alias find='fd'
alias lappy='ssh 10.42.0.1'
alias load-aliases='. ~/.zsh_aliases'
alias mce='micro'
alias obs='osc'
alias oneclickui='/usr/sbin/OneClickInstallUI'
alias rex='remote-exec'
alias rg='rg --color never'
alias rsst='rsstail -NrHd1plu'
alias ssh-vm='ssh 10.42.0.2'
alias sudo='sudo '
alias termbin='nc termbin.com 9999'
alias tmux='tmux attach-session -t simonizor || tmux new -s simonizor'
alias dl='wget --show-progress -qO'
alias weather-mp='echo "$(tput setaf 4)$(tput bold)$(weather --imperial -qaf --no-cache kmrj)"'
alias which='/usr/bin/which'
alias xclip-i='xclip -selection primary -i'
alias xclip-o='xclip -selection primary -o'
alias gspm='$HOME/github/spm/spm'
alias lyrics='tput reset; $HOME/github/scripts/misc/lyrics.sh'
alias lyrics-playing="jq -r '.songLyrics' ~/.config/Google\ Play\ Music\ Desktop\ Player/json_store/playback.json"
# alias lyrics-playing='tput reset; $HOME/github/scripts/misc/lyrics.sh "$(mpc -f %artist% | head -n 1)" "$(mpc -f %title% | head -n 1)"'
alias beautiful-load='beautifuldiscord --css /home/simonizor/github/DiscordThemes/compact-discord/compact-discord.css'
alias passman='$HOME/github/gpgpassman/gpgpassman.sh'
alias wgetspeed='$HOME/github/scripts/speedtest/speedtest.sh'
alias wttr-refresh='clr; $HOME/github/scripts/misc/wttrrefresh.sh'
alias dir='dir'
unalias dir
#-- Global --#
alias -g L="| less"
alias -g H="| head"
alias -g T="| tail"
alias -g G="| grep --color=auto"
alias -g N=">/dev/null"
#-- Suffix --#
alias -s html='$BROWSER'
alias -s com='$BROWSER'
alias -s org='$BROWSER'
alias -s .git='git clone'

########################################
####    Variables for long paths    ####
########################################

USBHDD="/run/media/simonizor/USBHDD"

time="$(date +'%l:%M:%S %p')"

################################
####    Simple functions    ####
################################

# Use curl and jq to search for packages in the Arch Linux AUR
aursearch () {
    curl -sSL "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$@" | jq -r '.results[]'
}

# Convert to and from binary
binary-convert () {
    case $1 in
        -b|b)
            echo "$2" | perl -lpe '$_=join " ", unpack"(B8)*"'
            ;;
        -a|a)
            echo "$2" | perl -lape '$_=pack"(B8)*",@F'
            ;;
        0*|1*)
            echo "$@" | perl -lape '$_=pack"(B8)*",@F'
            ;;
        *)
            echo "$@" | perl -lpe '$_=join " ", unpack"(B8)*"'
            ;;
    esac
}

# Fuck bc; use awk
calc () {
    awk "BEGIN {print $@}"
}

help () {
    curl -s "https://cht.sh/$@"
}

# check Discord client versions
discord-versions () {
    echo "Canary: $(curl -sSL -I -X GET "https://discordapp.com/api/download/canary?platform=linux&format=tar.gz" | grep -im1 '^location:' | rev | cut -f1 -d'/' | rev)"
    echo "PTB: $(curl -sSL -I -X GET "https://discordapp.com/api/download/ptb?platform=linux&format=tar.gz" | grep -im1 '^location:' | rev | cut -f1 -d'/' | rev)"
    echo "Stable: $(curl -sSL -I -X GET "https://discordapp.com/api/download?platform=linux&format=tar.gz" | grep -im1 '^location:' | rev | cut -f1 -d'/' | rev)"    
}

# List size of directories
dirsize () { du -h --max-depth=0 "$@" | sort -h -r }
dirsize-a () { du -h "$@" | sort -h -r }

discord-status () { curl -s "https://status.discordapp.com/" | grep 'class="name"\|class="component-status"' -A 1 | grep -v '<\|\-' | sed '1~2s%      %%g;0~2s%      %-%g' }

#Check to see if site is down for you or everyone
downforme () {
    wget -qO - "http://downforeveryoneorjustme.com/$1" | grep -qo "It's just you" && echo -e "$(tput setaf 1)It's just you.\n$(tput setaf 2)$1 is up.$(tput sgr0)" || echo -e "$(tput setaf 3)It's not just you! \n$(tput setaf 1)$1 looks down from here.$(tput sgr0)"
}

# List size of file
filesize () { du -h -a --max-depth=1 "$@" | sort -h -r }
filesize-a () { du -h -a "$@" | sort -h -r }

gitinfo () {
    curl -sSL "https://api.github.com/repos/$1" | jq -r ".$2"
}

gitissues () {
REPO_LIST="
simoniz0r/spm
simoniz0r/deb2appimage
simoniz0r/Discord-Linux-Client-Issues
simoniz0r/discord-css-injection
simoniz0r/osc-easy-install
simoniz0r/yadshot
simoniz0r/OpenDM
simoniz0r/Discord-AppImage
simoniz0r/Discord-PTB-AppImage
simoniz0r/Discord-Canary-AppImage
"
    for repo in $(echo $REPO_LIST); do
        curl -sSL "https://api.github.com/repos/$repo" -o /tmp/gitissues
        echo "$repo"
        echo "Open Issues: $(jq -r '.open_issues' /tmp/gitissues)"
        echo "Watchers: $(jq -r '.watchers' /tmp/gitissues)"
        echo "Subscribers: $(jq -r '.subscribers_count' /tmp/gitissues)"
        rm -f /tmp/gitissues
    done
}

# View latest github release
gitrelease () {
    curl -sSL "https://api.github.com/repos/$1/$2/releases" | jq -r ".[$3].assets[]"
}

# Output Github commits and messages for chosen repo
list-commits () {
    wget -qO - "https://api.github.com/repos/simoniz0r/$1/commits" | jq -r '.[] | .sha, .commit.message' | head -n $2 | paste -sd ' \n'
}

# Output currently playing mpc song
mpc-current () {
    printf '\e[?25l'
    while true; do
        echo
        echo
        echo "$(tput setaf 4)$(mpc current --wait -f "\n\nArtist: %artist%\nSong: %title%")"
    done
}

# Show resource use for specific process
sps () {
    ps -eo pid,rss,%cpu,comm --sort -rss | grep -i "%CPU\|$@" | grep -v 'grep'
}

# Execute bash scripts remotely
remote-exec () { bash -c "$(wget --quiet $@ -O -)" }

# Search for and play a youtube video
mpvyt () { mpv ytdl://ytsearch10:"$*" }

# show latest builds from openqa.opensuse.org

# Use rsstail to view feeds easily
rss () {
    case $1 in
        o*)
            rsstail -NrHd1plu  https://build.opensuse.org/main/latest_updates.rss
            ;;
        p*)
            rsstail -NrHd1plu https://www.phoronix.com/rss.php
            ;;
        t*)
            twreleaselink="$(rsstail -1ln 1 -u http://review.tumbleweed.boombatower.com/feed.xml | tail -n 1 | cut -f2 -d' ')"
            w3m "$twreleaselink"
            ;;
    esac
}

# watch travis logs
traviswatch () {
    watch -tcn 2 "curl -sL "https://api.travis-ci.org/v3/job/$1/log.txt" | tail -n 50"
}

# Use weather-util to output weather every 300 seconds
weather-watch () {
    printf '\e[?25l'
    watch -tcn 300 'echo "$(tput setaf 4)$(weather --imperial -q -a --no-cache kmrj)"'
    printf '\e[?25h'
}

# Use wttr.in to output weather
wttr (){
    LOCATION="$1"
    FLOCATION="$2"
    case $1 in
        0*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?0"
            LOCATION=""
            FLOCATION=""
            ;;
        1*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?1"
            LOCATION=""
            FLOCATION=""
            ;;
        2*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?2"
            LOCATION=""
            FLOCATION=""
            ;;
        *)
            if [ -z "$LOCATION" ]; then
                LOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$LOCATION"
            LOCATION=""
    esac
}

# Decompress any archive type
x () {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.*|*.tar)
                tar -xf "$1"
                ;;
            *.bz2)
                bunzip2 "$1"
                ;;
            *.rar)
                unrar x "$1"
                ;;
            *.gz)
                gunzip "$1"
                ;;
            *.jar|*.zip)
                unzip "$1"
                ;;
            *.Z)
                uncompress "$1"
                ;;
            *.deb)
                ar x "$1"
                ;;
            *)
                echo "'$1' cannot be extracted"
                ;;
        esac
    else
        echo "'$1' is not a file"
    fi
}

zyp () {
    case "$1" in
        dup|in|ar|rr|-*) zypper zyp "$@";;
        rm) zypper zyp -n "$@";;
        *) zypper zyp -q "$@";;
    esac
}
